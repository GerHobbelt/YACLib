name: Linux

on:
  push:
    branches: [ main ]
    paths-ignore: [ 'doc/**', '**.md' ]
  pull_request:
    branches: [ main ]
    paths-ignore: [ 'doc/**', '**.md' ]
  schedule:
    - cron: '0 12 * * 1-5'

jobs:
  # TODO(MBkkt) Add clang-5.0, clang-6.0, clang-7
  #             Fucking cppreference liars, clang doesn't support simple variant usage, before clang-8!
  #             We can only support this when we remove the variant from the Result
  # TODO(MBkkt) Add gcc-12, clang-15 when it release
  # TODO(MBkkt) Add other compilers, like Intel C++?
  # TODO(MBkkt) libstdc++-7-dev, libc++ old version

  main:
    runs-on: 'ubuntu-${{ matrix.os }}'
    strategy:
      fail-fast: false
      matrix:
        os: [ 18.04, 20.04 ]
        compiler: [ 8, 9, 10, 11, 12, 13, 14, gcc ]
        isPR:
          - ${{ github.event_name == 'pull_request' }}
        exclude:
          - isPR: true
            os: 20.04
            compiler: 8
          - isPR: true
            os: 20.04
            compiler: 9
          - isPR: true
            os: 20.04
            compiler: 10
          - isPR: true
            os: 20.04
            compiler: 11
          - isPR: true
            os: 20.04
            compiler: 12
          - isPR: true
            os: 20.04
            compiler: 13
          - isPR: true
            os: 20.04
            compiler: 14
          - isPR: true
            os: 20.04
            compiler: gcc

    env:
      COMPILERS_GCC: 'gcc-7 g++-7 gcc-8 g++-8 gcc-9 g++-9 gcc-10 g++-10 gcc-11 g++-11'
      COMPILERS_GCC_PR: 'gcc-7 g++-7'
      BUILD_TYPE: 'Debug RelWithDebInfo'

    steps:
      - uses: actions/checkout@v2

      - name: Update dependencies
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build googletest libstdc++-7-dev libunwind-dev

      - name: Install dependencies clang
        if: ${{ matrix.compiler == '8' }}
        run: |
          sudo apt-get install clang-8 libc++-8-dev libc++abi-8-dev

      - name: Install dependencies clang
        if: ${{ matrix.compiler != '8' && matrix.compiler != 'gcc' }}
        run: |
          sudo wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          if [[ ${{ matrix.os }} == "18.04" ]]; then
            ubuntu="bionic"
          else
            ubuntu="focal"
          fi
          version=${{ matrix.compiler }}
          sudo add-apt-repository "deb http://apt.llvm.org/$ubuntu/ llvm-toolchain-$ubuntu-$version main"
          sudo apt-get update
          sudo apt-get install clang-$version libc++-$version-dev libc++abi-$version-dev

      - name: Install dependencies gcc
        if: ${{ matrix.compiler == 'gcc' }}
        run: |
          if [[ ${{ github.event_name }} == "pull_request" ]]; then
            sudo apt-get install $COMPILERS_GCC_PR
          else
            sudo apt-get install $COMPILERS_GCC
          fi

      - name: Configure CMake
        run: |
          if [[ ${{ matrix.compiler }} == "gcc" ]]; then
            if [[ ${{ github.event_name }} != "pull_request" ]]; then
              compilers=($COMPILERS_GCC)
            else
              compilers=($COMPILERS_GCC_PR)
            fi            
          else
            version=${{ matrix.compiler }}
            compilers=("clang-$version" "clang++-$version")
          fi

          stdlibs_name=(libcxx libstdcxx)
          link_options=(
            "-stdlib=libc++;-lc++abi"
            "-stdlib=libstdc++"
          )
          compile_options=(
            "-stdlib=libc++"
            "-stdlib=libstdc++"
          )

          for (( i=0; i<${#compilers[*]}; i+=2 )); do
            for (( j=0; j<${#link_options[*]}; j+=1 )); do
              for build_type in ${BUILD_TYPE[*]}; do
                link_option=""; compile_option=""
                if [[ ${compilers[$i]} == gcc-* ]]; then
                  if [[ ${stdlibs_name[$j]} != "libstdcxx" ]]; then
                    continue  # TODO(MBkkt) I dunno how to get GNU GCC to work with other stdlibs
                  fi
                else
                  link_option=${link_options[$j]}; compile_option=${compile_options[$j]}
                fi
          
                dir="build_${compilers[$i]}_${stdlibs_name[$j]}_$build_type"
                echo $dir

                cmake -S . -B $dir                           \
                  -DCMAKE_BUILD_TYPE=$build_type             \
                  -DYACLIB_CXX_STANDARD=17                   \
                  -DYACLIB_TEST=SINGLE                       \
                  -DCMAKE_C_COMPILER=${compilers[$i]}        \
                  -DCMAKE_CXX_COMPILER=${compilers[$i + 1]}  \
                  -G"Ninja"                                  \
                  -DYACLIB_LINK_OPTIONS="$link_option"       \
                  -DYACLIB_COMPILE_OPTIONS="$compile_option"
              done
            done
          done

      - name: Build
        run: |
          for dir in build*/; do
            ninja -C $dir
          done

      - name: Test
        run: |
          for dir in build*/; do
            cd $dir;
            ctest --output-on-failure -V
            cd ..
          done
