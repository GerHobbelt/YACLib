name: Coverage

on:
  push:
    branches: [ main ]
    paths-ignore: [ 'doc/**', '**.md' ]
  pull_request:
    branches: [ main ]
    paths-ignore: [ 'doc/**', '**.md' ]

jobs:
  main:
    runs-on: ubuntu-20.04

    env:
      YACLIB_FAULT: 'OFF ON'

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install pip ninja-build lld gcc-11 g++-11 libstdc++-11-dev lcov
          sudo ln -sf /usr/local/bin/ld /usr/bin/lld
          sudo pip install -U gcovr

          sudo update-alternatives                                                                                     \
            --install /usr/bin/gcc        gcc        /usr/bin/gcc-11        200                                        \
            --slave   /usr/bin/g++        g++        /usr/bin/g++-11                                                   \
            --slave   /usr/bin/gcc-ar     gcc-ar     /usr/bin/gcc-ar-11                                                \
            --slave   /usr/bin/gcc-nm     gcc-nm     /usr/bin/gcc-nm-11                                                \
            --slave   /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-11                                            \
            --slave   /usr/bin/gcov       gcov       /usr/bin/gcov-11                                                  \
            --slave   /usr/bin/gcov-tool  gcov-tool  /usr/bin/gcov-tool-11                                             \
            --slave   /usr/bin/gcov-dump  gcov-dump  /usr/bin/gcov-dump-11
          sudo update-alternatives --auto gcc

          sudo update-alternatives                                                                                     \
            --install /usr/bin/cpp        cpp        /usr/bin/cpp-11        200
          sudo update-alternatives --auto cpp

          gcc --version; gcov --version

      - name: Configure CMake
        run: |
          wait_type=""
          for yaclib_fault in ${YACLIB_FAULT[*]}; do
            dir="build_fault_${yaclib_fault}"
            echo $dir
          
            cmake -S . -B $dir                                                                                         \
              -G "Ninja"                                                                                               \
              -DCMAKE_BUILD_TYPE=Debug                                                                                 \
              -DCMAKE_C_COMPILER=gcc                                                                                   \
              -DCMAKE_CXX_COMPILER=g++                                                                                 \
              -DYACLIB_FAULT=$yaclib_fault                                                                             \
              -DYACLIB_TEST=SINGLE                                                                                     \
              -DYACLIB_FLAGS="COVERAGE;CORO;$wait_type"                                                                \
              -DYACLIB_CXX_STANDARD=20                                                                                 \
              -DYACLIB_COMPILE_OPTIONS="-O1;-fno-inline"

            if [[ "$wait_type" == "" ]]; then
              wait_type="ATOMIC_EVENT"
            else
              wait_type=""
            fi
          done

      - name: Build
        run: |
          for yaclib_fault in ${YACLIB_FAULT[*]}; do
            dir="build_fault_${yaclib_fault}"
            echo $dir
          
            ninja -C $dir
          done

      - name: Test
        run: |
          for yaclib_fault in ${YACLIB_FAULT[*]}; do
            dir="build_fault_${yaclib_fault}"
            echo $dir
          
            cd $dir
            ctest --output-on-failure -C Debug -V
            cd ..
          done

      - name: Collect with gcovr
        run: |
          for yaclib_fault in ${YACLIB_FAULT[*]}; do
            dir="build_fault_${yaclib_fault}"
            echo $dir
          
            cd $dir
            gcovr                                                                                                      \ 
              --root=".."                                                                                              \
              --exclude="/usr/*"                                                                                       \          
              --exclude="*/_deps/*"                                                                                    \          
              --exclude="*/test/*"                                                                                     \          
              --exclude="*/fault/*"                                                                                    \          
              --exclude-unreachable-branches                                                                           \
              --exclude-throw-branches                                                                                 \
              --gcov-executable="gcov"                                                                                 \
              --json="./coverage_data.json"
            cd ..
          done

          gcovr                                                                                                        \
            --add-tracefile="./build_fault_OFF/coverage_data.json"                                                     \
            --add-tracefile="./build_fault_ON/coverage_data.json"                                                      \
            --coveralls-pretty="./total.coveralls.json"

          cat ./total.coveralls.json

      - name: Coveralls
        uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./total.coveralls.json
